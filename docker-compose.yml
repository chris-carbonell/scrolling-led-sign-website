# # Overview
# set up website, database, and API

version: '3.7'

name: ${PROJECT_NAME}  # project name (aka stack)

services:

  # # db
  # database
  db:
    build: ./db  # build with `docker-compose build`

    container_name: ${PROJECT_ABBREV}-db

    restart: always

    ports:
      - "5432:${POSTGRES_PORT}"
    
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    
    volumes:
      - ./db/data:/var/lib/postgresql/data

    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      interval: 10s
      timeout: 3s
      retries: 3

    networks:
      - sls

  # # api
  # fastapi backend for interacting with database
  api:
    build: ./api  # build with `docker-compose build`

    container_name: ${PROJECT_ABBREV}-api

    depends_on:
      db:
        condition: service_healthy

    env_file:
      - .env

    # TODO: once working, don't map this port
    ports:
      - ${API_PORT}:8000

    # TODO: fix the health check (it was preventing Treafik from processing the labels)
    # healthcheck:
    #   test: curl http://localhost:${APP_PORT}/healthcheck || exit 1
    #   # TODO: can pytest be used here instead?
    #   interval: 1m30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 2m

    networks:
      - sls
      - web

  # # app
  # streamlit frontend for interacting with database
  app:
    build: ./app  # build with `docker-compose build`

    container_name: ${PROJECT_ABBREV}-app

    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started

    env_file:
      - .env

    ports:
      - ${APP_PORT}:8501

    networks:
      - sls
      - web

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      
      # routers

      ## http
      - "traefik.http.routers.scrolling-led-sign.entrypoints=web"
      - "traefik.http.routers.scrolling-led-sign.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"

      ## https
      - "traefik.http.routers.scrolling-led-sign-secure.entrypoints=websecure"
      - "traefik.http.routers.scrolling-led-sign-secure.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.scrolling-led-sign-secure.tls=true"
      - "traefik.http.routers.scrolling-led-sign-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.scrolling-led-sign-secure.service=scrolling-led-sign"

      # middlewares
      - "traefik.http.routers.scrolling-led-sign.middlewares=https-redirect@file"
      # - "traefik.http.routers.scrolling-led-sign-secure.middlewares=csrf@file"
      # - "traefik.http.routers.scrolling-led-sign-secure.middlewares=secure-headers@file"

      # # services
      # - "traefik.http.services.scrolling-led-sign.loadbalancer.server.scheme=https"  # cloudflare gateway time-out
      - "traefik.http.services.scrolling-led-sign.loadbalancer.server.port=8501"

  # # server
  # PostgREST
  server:
    image: postgrest/postgrest
    container_name: ${PROJECT_ABBREV}-server

    ports:
      - "${SERVER_PORT}:3000"

    environment:
      - PGHOST=${POSTGRES_HOST}
      - PGDATABASE=${POSTGRES_DB}
      - PGPORT=${POSTGRES_PORT}
      - PGRST_DB_SCHEMAS=${POSTGRES_SCHEMA}
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGRST_DB_ANON_ROLE=${SERVER_DB_ANON_ROLE}
      - PGRST_JWT_SECRET=${SERVER_JWT_SECRET}
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://${LOCAL_IP}:${SERVER_PORT}

    depends_on:
      db:
        condition: service_healthy

    networks:
      - sls

  # # swagger
  # Swagger docs for PostgREST
  swagger:
    image: swaggerapi/swagger-ui
    container_name: ${PROJECT_ABBREV}-swagger

    ports:
      - "${SWAGGER_PORT}:8080"
    expose:
      # - "8080"
      - "${SWAGGER_PORT}"

    environment:
      API_URL: http://${LOCAL_IP}:${SERVER_PORT}

    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_started

    networks:
      - sls

networks:
  sls:
  web:
    external: true